@chapter{Sintaksa u funkcijama}

@section{Brisanje zagrada}

@p U prethodnim primerima videli smo da lambda izrazi mogu biti veoma nepregledni zbog višestrukih zagrada. Zbog toga su u lambda račun, pa i Haskel, uvedene konvencije koje omogućavaju brisanje suvišnih zagrada u lambda izrazima:

@list{
@li @em{Zagrade oko lambda izraza ne zapisujemo.} Kada unosimo neki izraz u @em{GHCi}, tada nije neophodno da postavljamo zagradu koja obuhvata celokupan izraz. Isto važi i kada u kodu definišemo neki lambda izraz. Na primer, umesto @code{s = (f 20)} pišemo @code{f = f 20}.
@li @em{Aplikacija ima veći prioritet u odnosu na apstrakciju.} Praktično to znači da telo lambda funkcije nije neophodno postavljati u posebne zagrade. Na primer umesto @code{\x -> (f x)} pišemo @code{\x -> f x}.
@li @em{Aplikacija lambda izraza je levoasocijativna.} To znači da se izraz oblika @code{((M N) P)} može zapisati kao @code{M N P}. Induktivnim argumentom sledi da se i izraz @code{(((M N) P) Q)} može zapisati kao @code{M N P Q}, itd... Na primer, umesto @code{(zbir 22) 33} pišemo samo @code{zbir 22 33}. Sa druge strane, iz izraza @code{f 10 (g 20)} ne možemo obrisati zagrade, jer bismo time dobili izraz koji se interpretira kao @code{((f 10) g) 20}.
@li @em{Apstrakcija je desnoasocijativna.} Npr. umesto @code{\x -> (\y -> x + y)} pišemo @code{\x -> \y -> x + y}.
@li @em{Višestruke apstrakcije se mogu svesti pod jednu lambdu.} Na primer umesto @code{\x -> \y -> x + y} pišemo samo @code{\x y -> x + y}. Obratite pažnju da parametri funkcije moraju međusobno biti razdvojeni razmakom.
}

@example{
@p Pojednostavimo lambda izraz @ccode{(\x -> (\y -> ((f x) (g y))))}.
@p Pre svega, zagrade oko celog lambda izraza mogu se obrisati, čime se dobija
@ccode{\x -> (\y -> ((f x) (g y)))}.
Višestruka apstrakcija može se svesti pod jednu apstrakciju, čime se dobija
@ccode{\x y -> ((f x) (g y))}.
Zagrade u telu lambda funkcije nisu neophodne, jer se u tim zagradama nalazi jedna aplikacija (a po drugom pravilu, aplikacija ima veći prioritet u odnosu na apstrakciju)
@ccode{\x y -> (f x) (g y)}.
Kako je aplikacija levo asocijativna, levi par zagrada se može obrisati
@ccode{\x y -> f x (g y)}
}

@p Osim pravila o zagradama u lambda izrazima, koristi se i jedno pravilo koje se odnosi na zagrade u tipovima. Ovo pravilo kaže da je @code{->} desno-asocijativan operator, odnosno da @code{a -> (b -> c)} može pisati kao @code{a -> b -> c}. 

@example{
@p Pogledajmo tipove @code{Int -> (Char -> Bool)} i @code{(Int -> Char) -> Bool}. Gledano kao na nizove simbola, razlika između ova dva tipa je samo raspored zagrada. Ali tipovi nam govore mnogo o ovim funkcijama!

@p Neka je @code{f :: Int -> (Char -> Bool)}. Tada primenom @code{f} na neku vrednost @code{n :: Int} dobijamo funkciju @code{f n :: Char -> Bool}. Funkciju @code{f n} možemo zatim da primenimo vrednost @code{b :: Bool}, i dobijemo vrednost tipa @code{Char}. Dakle, @code{f} možemo da shvatimo kao binarnu funkciju koja uzima jednu @code{Int} i jednu @code{Char} vrednost. Tip ove funkcije, po gorepomenutom pravilu, možemo da napišemo i kao @code{Int -> Char -> Bool}

@p Neka je @code{g :: (Int -> Char) -> Bool}. Funkciju @code{g} možemo da primenimo samo na neku drugu funkciju @code{h :: Int -> Char} i time dobijemo vrednost tipa @code{Char}. Dakle @code{g} je funkcija "jednog argumenta"@note{Svaka funkcija u Haskelu je funkcija jednog argumenta. Ali zbog karijevanja, funkcije čiji tip je oblika @code{a1 -> (a2 -> b)} možemo da nazivamo funkcijama dva argumenta, itd...}.
}

@example{
@p U prethodnoj lekciji, u zadatku 7 se tražilo da se napiše funkcija @ccode{primeni :: (Int -> Bool) -> ((Int, Int) -> (Bool, Bool))} koja uzima jednu funkciju @code{f :: Int -> Bool}, jedan uređen par tipa @code{(Int, Int)} i vraća uređen par koji se dobija primenom @code{f} na svaku koordinatu uređenog para. Rešenje do kog smo došli je 

@codeBlock{
primeni :: (Int -> Bool) -> ((Int, Int) -> (Bool, Bool))
primeni = (\f -> (\par -> (f (fst par), f (snd par))))
}

@p Navedena lambda je oblika @ccode{(\f -> (\par -> …))}. Pre svega, možemo se osloboditi zagrada oko celog izraza, a zatim svesti dvostruku apstrakciju pod jednu lambdu.

@p Tip funkcije je oblika  @code{a -> (b -> c)}, pa možemo ukloniti jedan par zagrada.

@p Dobijeni kod je nešto čitljiviji:

@codeBlock{
primeni :: (Int -> Bool) -> (Int, Int) -> (Bool, Bool)
primeni = \f par -> (f (fst par), f (snd par))
}{Iz ovog koda ne možemo ukloniti više zagrada}
}
@todo{dodati referencu}

@problem{
Uraditi ponovo zadatke iz prethodne lekcije koristeći što manje zagrada u kodu.
}

@section{@em{If then else}}

@p Jedna od osnovnih mogućnosti koju svaki programski jezik mora posedovati je sposobnost promene toka izvršavanja programa u zavisnosti od stanja u kom se nalazi. Ovakvu promenu toka nazivamo @def{grananje}.

@p Izraz @em{if then else} je najjednostavniji primer grananja u Haskelu@note{Izraz u potpunosti odgovara trenarnom operatoru @code{? :} koji je prisutan u mnogim imperativnim jezicima.}. Sintaksa za ovu konstrukciju ima oblik @ccode{if t then a else b}, gde je @code{t} neki logički izraz kog nazivamo @em{uslov}, a @code{a} i @code{b} izrazi istog tipa. Izraz @code{if t then a else b} se evaluira u @code{a} ako se @code{t} evaluira u @code{True}, a u suprotnom u @code{b}. Sledeći primer ilustruje korišćenje @em{if then else} konstrukcije:

@terminal{
ghci> if 5 > 0 then "5 je pozitivan broj" else "5 nije pozitivan broj"
"5 je pozitivan broj"
}

@p U prikazanom primeru, uslov je konstantan, te će navedeni @em{if then else} izraz uvek imati istu vrednost. Mnogo korisnije je kada @em{if then else} postavimo u telo funkcije:

@codeBlock{
daLiJepozitivan = \x -> if x > 0 then show x ++ "jeste" else show x ++ "nije"
}

@terminal{
ghci> daLiJepozitivan 3
"jeste"
}

@p Važno je da poštujemo tri pravila:

@list{
@li Uslov (izraz između @code{if} i @code{then} klauze) mora biti tipa @code{Bool}.
@li Moraju se navesti povratne vrednosti za oba slučaja (u suprotnom izraz bi mogao biti nedefinisan u zavisnosti od vrednosti uslova).
@li Povratne vrednosti za oba slučaja moraju biti istog tipa (u suprotnom izraz bi imao različit tip u zavisnosti od vrednosti uslova).
}

@problem{Bez korišćenja ugrađene funkcije @code{max}, implementirati funkciju @code{max' :: Int -> Int -> Int} koja nalazi maksimum dva broja.}
{@codeBlock{
max' :: Int -> Int -> Int
max' = \x y -> if x > y then x else y 
}}

@problem{Implementirati funkciju @code{prestupna :: Int -> Bool} koja na osnovu pravila Gregorijanskog kalendara određuje da li je data godina prestupna. Godina se smatra prestupnom ako je deljiva sa @m{4}, osim u slučaju kada je deljiva i sa @m{100}. Međutim, ako je deljiva i sa @m{400} tada se ipak smatra prestupnom. Na primer, godina 2000. je bila prestupna jer je deljiva sa @m{400}. Takve su bile i 2004, 2008 i 2012. jer su sve deljive sa @m{4}. Ali 2100. godina neće biti prestupna jer je deljiva sa @m{100} ali ne i sa @m{400}.}

@section{Ograđene definicije}

@p Ograđena definicija@note{eng. @em{guards}} je poseban oblik definicije funkcije koja omogućava pregledno testiranje više uslova. Svaki od uslova je logički izraz koji se navodi nakon vertikalne crte @code{|}, a nakon uslova postavlja se povratna vrednost funkcije.

@p Ograđena definicija ne predstavlja izraz@note{Za razliku od @em{let in} ili @em{if then else} sintakse.}. Opšti oblik ograđenih definicija bi bio@note{Ovakva definicija funkcije podseća na narednu matematičku sintaksu @eq{f(x)=
  \begin{cases}
  \mathrm{vrednost1}, & \mathrm{uslov1}\\
  \mathrm{vrednost1}, & \mathrm{uslov1}\\
  \vdots & \\
  \mathrm{vrednostN}, & \mathrm{uslovN}
\end{cases}}}:

@codeBlock{
f x1 x2 x3 
  | uslov1 = vrednost1
  | uslov2 = vrednost2
  ...
  | uslovN = vrednostN
}{U ovom zapisu, @code{f} je ime funkcije koja se definiše, a @code{x1}, @code{x2}, @code{x3} su parametri funkcije @code{f}. Uslovi, @code{uslov1} ... @code{uslovN} su izrazi koji se evaluiraju u logičku vrednost.}

@p Kao i kod @em{if then else} konstrukcije, i kod ograđenih definicija sve povratne vrednosti moraju biti istog tipa.

@example{
@p Funkcija @code{pozitivan :: Int -> [Char]} koja vraća nisku @code{"Pozitivan"} ako je broj veći ili jednak nuli a u suprotnom @code{"Negativan"}, može se ovako definisati

@codeBlock{
pozitivan :: :: Int -> [Char]
pozitivan x
 | x >= 0 = "Pozitivan"
 | x < 0 = "Negativan"
}

@p Prilikom "poziva" @code{pozitivan (-4)}, prvo će se proveriti prvi navedeni slučaj, odnosno @code{x >= 0}. Kako se @code{-4 >= 0} beta redukuje u @code{False}, proveriće se naredni slučaj @code{x < 0}. Kako se @code{-4 < 0} redukuje u @code{True}, vrednost @code{pozitivan (-4)} je @code{"Negativan"}.

@p Dakle, sa ograđenim definicijama moguće je proveriti niz uslova. Funkcija će imati vrednost koja odgovara prvom tačnom uslovu. Ako ni jedan od uslova nije tačan, tada će doći do izuzetka.

@codeBlock{
pozitivan' :: :: Int -> [Char]
pozitivan' x
 | x > 0 = "Pozitivan"
 | x < 0 = "Negativan"
}{U ovoj, @em{lošoj}, definiciji uslov @code{x == 0} nikad nije proveren, zbog čega će poziv @code{pozitivan' 0} dovesti do izuzetka.}
}

@example{
@p Pogledajmo nešto složeniji primer. Funkcija koja vraća opis jačine zemljotresa na osnovu njegove jačine u Rihterima može biti definisana sa narednim kodom:

@codeBlock{
opisZemljotresa :: Double -> [Char]
opisZemljotresa r
  | (r >= 0.0) && (r < 2.0) = "Mikro"
  | (r >= 2.0) && (r < 4.0) = "Manji"
  | (r >= 4.0) && (r < 5.0) = "Lakši"
  | (r >= 5.0) && (r < 6.0) = "Srednji"
  | (r >= 6.0) && (r < 7.0) = "Jak"
  | (r >= 7.0) && (r < 8.0) = "Velik"
  | (r >= 8.0) && (r < 10.0) = "Razarajući"
  | r >= 10 = "Epski"
}{Ako pozovemo @code{opisZemljotresa 5.6}, tada će uslov @code{(r >= 5.0) && (r < 6.0)} biti zadovoljen zbog čega će se @code{opisZemljotresa 5.6} evaluirati @code{"Srednji"}. Primetimo da funkcija nije definisana za negativne argumente.}

@p U prethodnom primeru možemo primetiti da uslove možemo pojednostaviti. Naime kako su uslovi poređani redom po jačini zemljotresa, možemo se osloboditi dela uslova kojim se proverava da je jačina zemljotresa jača od nekog intenziteta@note{Jer  je povratna vrednost funkcije definisane sa @em{guards} sintaksom ona koja odgovara prvom zadovoljenom uslovu.}. Stoga funkciju @code{opisZemljotresa} možemo i ovako definisati

@codeBlock{
opisZemljotresa :: Double -> [Char]
opisZemljotresa r
  | r < 2.0 = "Mikro"
  | r < 4.0 = "Manji"
  | r < 5.0 = "Lakši"
  | r < 6.0 = "Srednji"
  | r < 7.0 = "Jak"
  | r < 8.0 = "Velik"
  | r < 10.0 = "Razarajući"
  | r >= 10 = "Epski"
}{Pozivanjem @code{opisZemljotresa 5.6} ponovo dobijamo @code{"Srednji"}. Iako su i uslovi @code{r < 7.0}, @code{r < 8.0}, @code{r < 10.0} tačni, uslov @code{r < 6.0} je prvi naveden.}

@p Primetimo da je i u ovom (kao i u prethodnom primeru) na poslednjem mestu postavljen slučaj koji je zadovoljen kada svi ostali slučajevi nisu. Zbog toga, za poslednji uslov ne mora se stavljati nikakav izraz, već je dovoljno postaviti konstantu @code{True}, i tada će poslednji uslov "uhvatiti" sve što nije uhvaćeno sa prethodnim uslovima. Uobičajeno je da se na kraju ograđene definicije postavi konstanta @code{otherwise} koja je ime za vrednost @code{True}@note{Zaista, u @em{GHCi}-u proverite da je @code{otherwise == True}.}:

@codeBlock{
opisZemljotresa r
  | r < 2.0 = "Mikro"
  | r < 4.0 = "Manji"
  | r < 5.0 = "Lakši"
  | r < 6.0 = "Srednji"
  | r < 7.0 = "Jak"
  | r < 8.0 = "Velik"
  | r < 10.0 = "Razarajući"
  | otherwise = "Epski"
}
}

@problem{Definisati funkciju @code{max3 :: Int -> Int -> Int -> Int} sa ograđenom definicijom, koja vraća najveću od tri celobrojne vrednosti.}{

@p Jedno od mogućih rešenja bi bilo:

@codeBlock{
max3 :: Int -> Int -> Int -> Int
max3 x y z
  | x <= z && y <= z = z
  | x <= y && z <= y = y
  | otherwise        = x
}
}

@section{Podudaranje oblika}

@p @def{Podudaranje oblika}@note{Eng. @em{pattern matching}} je sintaksa koja dozvoljava da se vrednosti funkcije definišu u zavisnosti od "oblika" argumenta. Da bismo definisali funkciju pomoću podudaranja oblika, potrebno je da odmah nakon imena funkcije navedemo oblik argumenta koji želimo da @em{uhvatimo} a zatim i vrednost funkcije za takav argument. Na primer, funkciju tipa @code{dupliraj :: Int -> Int} koja duplira argument možemo definisati sa:

@codeBlock{
dupliraj :: Int -> Int
dupliraj x = 2 * x
}{Ovo je primer trivijalnog podudaranja oblika. Ovde @code{x} predstavlja oblik proizvoljnog broja i ne vrši se nikakvo grananje.}

@p Kao što vidimo, navedenom sintaksom oslobodili smo se definicije funkcija preko lambda izraza. I zaista, gotovo uvek ćemo umesto sintakse za lambda apstrakciju koristiti podudaranje oblika, pa čak i kada u funkciji nema grananja.

@p Ipak, sintaksa podudaranja oblika je veoma zgodna za grananje. U najjednostavnijem slučaju, to grananje se sastoji u tome da se "uhvati" određena vrednost argumenta. Na primer funkcija @code{f} koja slika @code{0} u @code{1} a sve ostale brojeve u @code{0}, može biti ovako definisana:

@codeBlock{
f :: Int -> Int
f 0 = 1
f x = 0
}{Naravno, funkciju @code{f} smo mogli definisati lako i uz pomoć @em{guards} ili @em{if then else} sintakse.}

@p Dakle sa kodom @code{f 0} "uhvaćena je" posebna vrednost argumenta. Kao i kod @em{guards} sintakse, pri podudaranju oblika slučajevi se proveravaju redom, odozdo ka dole. Zato je naredna funkcija konstantna:

@codeBlock{
f' :: Int -> Int
f' x = 0
f' 0 = 1
}{U ovom slučaju, prva linija "hvata" oblik svakog argumenta, i nikad neće doći do provere druge linije. Prema tome, @code{f' 0} će se evaluirati u @code{0}.}

@p Naravno, moguće je navesti proizvoljno mnogo slučajeva:

@codeBlock{
daLiJeCifra :: Char -> Bool
daLiJeCifra '0' = True
daLiJeCifra '1' = True
daLiJeCifra '2' = True
daLiJeCifra '3' = True
daLiJeCifra '4' = True
daLiJeCifra '5' = True
daLiJeCifra '6' = True
daLiJeCifra '7' = True
daLiJeCifra '8' = True
daLiJeCifra '9' = True
daLiJeCifra x = False
}{Funkcija koja proverava da li dati karakter reprezentuje cifru.}

@p U navedenom primeru, poslednja linija koda, odnosno @code{daLiJeCifra x = False} "hvata" svaki argument. Ali kao što vidimo, povratna vrednost funkcije, ne zavisi od vrednosti uhvaćenog argumenta. U ovakvim situacijama, može se koristiti znak @code{_} koji predstavlja argument koji ne želimo da vezujemo za ime. U ovom kontekstu, znak @code{_} nazivamo @def{džoker}@note{eng @em{wildcard}}.

@p Koristeći džoker, poslednju liniju prethodnog primera možemo da zamenimo sa @code{daLiJeCifra _ = False}. Ako se vratimo na pretposlednji primer (funkcija @code{f} koja slika @code{0} u @code{1} a sve ostale brojeve u @code{0}), ta funkcija može biti definisana i sa

@codeBlock{
f :: Int -> Int
f 0 = 1
f _ = 0
}

@p Sa podudaranjem oblika, možemo lako definisati i funkcije više parametara. Tako na primer naredna dva koda definišu istu funkciju:

@codeBlock{
g :: Int -> Int -> Int
g = \x y -> x + 2*y
}

@codeBlock{
g :: Int -> Int -> Int
g x y = x + 2*y
}

@p Možemo i da "pomešamo" sintaksu lambda apstrakcije i sintaksu podudaranja oblika i da napišemo sledeći kod

@codeBlock{
g :: Int -> Int -> Int
g x = \y -> x + 2*y
}{Sintaksu podudaranja oblika možemo da shvatimo na sledeći način: kada @code{g} primenimo na neku vrednost @code{x}, tada dobijamo funkciju @code{\y -> x + 2*y}.}


@subsection{Podudaranje oblika liste}

@p Tehnika podudaranja oblika je veoma korisna pri radu sa listama. Tada lako možemo da uhvatimo praznu, jednočlanu, dvočlanu listu, itd... ili da rastavimo listu na glavu i rep. 

@example{
@p Funkciju koja proverava da li je lista celih brojeva prazna@note{Ovo je naravno funkcija @code{null}}, možemo definisati na sledeći način:

@codeBlock{
prazan :: [Int] -> Bool
prazan [] = True
prazan x = False
}{Slučaj prazne liste je uhvaćen sa oblikom @code{[]}, dok su svi ostali slučajevi obuhvaćeni generičkim promenljivom @code{x}.}

@p Neophodno je obuhvatiti sve moguće oblike promenljive. Ako se neki od oblika izostavi, definisana funkcija neće biti totalna, i za neke od argumenata će doći do izuzetka:

@codeBlock{
prazan' :: [Int] -> Bool
prazan' [] = True
}

@terminal{
ghci> prazan' [1, 2, 3]
*** Exception: main.hs:3:1-15: Non-exhaustive patterns in function prazan'
}
}

@p Na primer, ako želimo da napišemo funkciju @code{s :: [Int] -> Int} koja praznoj listi dodeljuje @m{0}, jednočlanoj listi dodeljuje element te liste, dvočlanoj listi dodeljuje zbir dva elementa, a svim ostalim listama dodeljuje @m{1}, korišćenjem @em{guards} sintakse dobijamo naredni kod:

@codeBlock{
s :: [Int] -> Int
s xs 
  | xs == [] = 0
  | len xs == 1 = xs !! 0
  | len xs == 2 = xs !! 0 + xs !! 1
  | otherwise = 1
}

@p Korišćenjem podudaranja oblika dobijamo elegantniji kod:

@codeBlock{
s :: [Int] -> Int
s [] = 0
s [x] = x
s [x, y] = x + y
s _ = 1
}

@p Kao što vidimo, podudaranjem oblika liste @em{dekonstruisali} smo neke moguće oblike argumenta funkcije. U trećoj liniji definisali smo funkciju u slučaju kada je njen argument jednočlana lista @code{[x]}. Imenom @code{x} ovde smo "vezali" član te jednočlane liste. Slično, u narednoj liniji koda, dekonstruisali smo dvočlane liste. U ovom slučaju, prvi element je predstavljen imenom @code{x} a drugi element imenom @code{y}.

@p Moguće je takođe koristi činjenicu da se lista poput @code{[x, y, z]} može predstaviti kao @code{x:[y,z]} ili @code{x:y:[z]} ili @code{x:y:z:[]}. Tako je prethodni primer moguće napisati i kao

@codeBlock{
s :: [Int] -> Int
s [] = 0
s (x:[]) = x
s (x:y:[]) = x + y
s _ = 1
}


@example{
@p Funkcija koja vraća rep liste brojeva (sve element osim prvog), može se definisati na sledeći način:

@codeBlock{
rep :: [Int] -> Int
rep (x:xs) = xs
}{Operator @code{:} nadovezuje element na početak @em{liste}. Prema tome @code{x} je prvi element, a @code{xs} predstavlja ostatak liste. Primetimo da ova funkcija definisana za slučaj prazne liste.}

@p Zapravo, pošto nas u navedenom kodu vrednost @code{x} ne interesuje, funkciju možemo definisati i sa džokerom:

@codeBlock{
rep :: [Int] -> Int
rep (_:xs) = xs
}{Džokere bi trebalo koristiti kad god je to moguće, jer poboljšavaju čitljivost koda tako što umanjuju broj vezanih imena.}
}

@p Dobro je naglasiti da pri podudaranju oblika nije moguće navesti oblik koji sadrži operator @code{++} (na primer ne možemo uhvatiti dvočlanu listu sa @code{[x] ++ [y]}). Razlog zašto je operator @code{:} moguće koristiti, a @code{++} ne, postaće jasan u jednoj od narednih lekcija.

@subsection{Podudaranje oblika @m{n}-torke}

@p Uređene @m{n}-torke se takođe mogu dekonstruisati podudaranjem oblika. 

@example{
@p Funkciju @code{saberi :: (Double, Double) -> Double} koja sabira koordinate uređenog para možemo definisati sa narednim kodom

@codeBlock{
saberi :: (Double, Double) -> Double
saberi (x, y) = x + y
}
}

@example{
@p Funkciju @code{saberi3} koja sabira koordinate uređene trojke možemo definisati na sledeći način

@codeBlock{
saberi3 :: (Double, Double, Double) -> Double
saberi3 (x, y, z) = x + y + z
}
}

@p Iz dva navedena primera, vidimo da nam funkcije poput @code{fst} ili @code{snd} nisu neophodne.

@subsection{Podudaranje oblika unutar lambda izraza}

@p U lambda izrazima moguće je upotrebiti podudaranje oblika za dekonstrukciju argumenta. Zbog same forme lambda izraza, moguće je navesti samo jedan oblik po kom se vrši podudaranje. Taj oblik postavljamo između "lambde" i strelice.

@example{
@p Funkciju @code{head} možemo elegantno da definišemo kao @ccode{\(x:xs) -> x}. Naravno, ova funkcija neće biti definisana za sve vrednosti, jer slučaj prazne liste nije obrađen (niti može biti obrađen ako je funkcija definisana sa lambda izrazom).
}

@p Podudaranje oblika u lambda izrazima retko se koristi sa listama, baš iz razloga zato što možemo proveriti samo jedan oblik argumenta (što je retko kad dovoljno u slučaju lista). Ali, kako je oblik uređenih @m{n}-torki u potpunosti određen tipom, sa takvim tipovima se često koristi podudaranje oblika u lambda izrazima.

@example{
@p Umesto funkcija @code{fst} i @code{snd} možemo koristiti lambda funkcije @code{\(x, y) -> x} i @code{\(x, y) -> y}.
}

@section{Zadaci}

@problem{Sa uređenom trojkom @code{(Double, Double, Double)} može se prezentovati vektor trodimenzionalne ravni. Napisati funkcije za zbir, skalarni i vektorski proizvod dva vektora, kao i funkciju koja skalira vektor za dati koeficijent i funkciju koja računa dužinu vektora.}

@problem{Reimplementirati funkciju @ccode{daLiJeCifra :: Char -> Bool} bez korišćenja bilo koje sintakse za grananje.}
{@p Možemo iskoristiti funkciju @ccode{elem :: Eq a -> a -> [a] -> Bool} koja proverava da li se element nalazi u listi:
@codeBlock{
daLiJeCifra :: Char -> Bool
daLiJeCifra x = elem x "0123456789"
}
}
